package anooppandey.TestComponents;

import org.testng.annotations.AfterMethod;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.safari.SafariDriver;
import org.testng.annotations.*;


import anooppandey.pageobjects.LandingPage;
import io.github.bonigarcia.wdm.WebDriverManager;

public class BastTest {
	
	public WebDriver driver;
	public LandingPage landingPage;

	public WebDriver initializerDriver() throws IOException {

		Properties prop = new Properties();
		FileInputStream fis = new FileInputStream(System.getProperty("user.dir")+"//src//main//java//anooppandey//resources//GlobalData.properties");
		prop.load(fis);

		String browserName = prop.getProperty("browser");
		
		

		if (browserName.equalsIgnoreCase("chrome")) {

			WebDriverManager.chromedriver().setup();
			driver = new ChromeDriver();

		} else if (browserName.equalsIgnoreCase("safari")) {

			driver = new SafariDriver();

		}

		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
		driver.manage().window().maximize();
		
		return driver;
	}
	
	@BeforeMethod(alwaysRun=true)
	public LandingPage launchApplication() throws IOException {
		
		driver = initializerDriver();
		landingPage = new LandingPage(driver);
		landingPage.goTo();
		return landingPage;
		
		
	}
	
	@AfterMethod(alwaysRun=true)
	public void tearDown() {
		driver.close();
	}
	
	public List<HashMap<String, String>> getJsonDataMap() throws IOException {

		// read json to String


		String jsonContent = FileUtils.readFileToString(
				new File(System.getProperty("user.dir") + "//src//main//java//anooppandey//data//PurchaseOrder.json"),
				StandardCharsets.UTF_8);
		
		//String to HashMap - (Need new dependency - Jackson Databind
		ObjectMapper mapper = new ObjectMapper();
		
		List<HashMap<String,String>> data = mapper.readValue(jsonContent, new TypeReference<List<HashMap<String,String>>>(){});
		return data;
	}
	

}
